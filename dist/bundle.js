/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/script.ts":
/*!***********************!*\
  !*** ./src/script.ts ***!
  \***********************/
/***/ (() => {

eval("\n// import { v4 as uuidv4 } from 'uuid';\n// abstract class InventoryItem {\n//   private _id: string;\n//   private _name: string;\n//   private _price: number;\n//   private _description: string;\n//   constructor(name: string, price: number, description: string) {\n//     this._id = uuidv4();\n//     this._name = name;\n//     this._price = price;\n//     this._description = description;\n//   }\n//   get id(): string {\n//     return this._id;\n//   }\n//   get name(): string {\n//     return this._name;\n//   }\n//   get price(): number {\n//     return this._price;\n//   }\n//   get description(): string {\n//     return this._description;\n//   }\n//   set name(name: string) {\n//     this._name = name;\n//   }\n//   set price(price: number) {\n//     this._price = price;\n//   }\n//   set description(description: string) {\n//     this._description = description;\n//   }\n// }\n// class Weapon extends InventoryItem {\n//   private _damage: number;\n//   constructor(name: string, price: number, description: string, damage: number) {\n//     super(name, price, description);\n//     this._damage = damage;\n//   }\n//   get damage(): number {\n//     return this._damage;\n//   }\n//   set damage(damage: number) {\n//     this._damage = damage;\n//   }\n// }\n// class Armor extends InventoryItem {\n//   private _defense: number;\n//   constructor(name: string, price: number, description: string, defense: number) {\n//     super(name, price, description);\n//     this._defense = defense;\n//   }\n//   get defense(): number {\n//     return this._defense;\n//   }\n//   set defense(defense: number) {\n//     this._defense = defense;\n//   }\n// }\n// class Character {\n//   private _id: string;\n//   private _name: string;\n//   private _archtype: string;\n//   private _fightingStyle: 'melee' | 'ranged';\n//   private _inventory: InventoryItem[];\n//   constructor(name: string, archtype: string, fightingStyle: 'melee' | 'ranged') {\n//     this._id = uuidv4();\n//     this._name = name;\n//     this._archtype = archtype;\n//     this._fightingStyle = fightingStyle;\n//     this._inventory = [];\n//   }\n//   get id(): string {\n//     return this._id;\n//   }\n//   get name(): string {\n//     return this._name;\n//   }\n//   get archtype(): string {\n//     return this._archtype;\n//   }\n//   get fightingStyle(): 'melee' | 'ranged' {\n//     return this._fightingStyle;\n//   }\n//   get inventory(): InventoryItem[] {\n//     return this._inventory;\n//   }\n//   set name(name: string) {\n//     this._name = name;\n//   }\n//   static createRPGCharacter(name:string,race:string): string {\n//     const newCharacter = `My name is ${name} with race of ${race}`\n//     return newCharacter\n//   }\n//   inventoryHTMLElement():HTMLElement{\n//     const container = document.createElement(\"div\");\n//     const section = document.querySelector('section')\n//     container.classList.add('container')\n//     this.inventory.forEach(function(item){\n//     const p = document.createElement('p');\n//     p.classList.add('p')\n//     const button = document.createElement('button')\n//     button.innerText = 'Delete'\n//     button.addEventListener('click', () => {\n//       p.remove()\n//     p.append(container)\n//     container.append(section!)\n//     })\n//     })\n//     return container\n//   }\n//   addItemToInventory(item: InventoryItem) {\n//     this._inventory.push(item);\n//   }\n//   removeFromInventory(item: InventoryItem) {\n//     this._inventory = this._inventory.filter((i) => i.id !== item.id);\n//   }\n//   inventoryValue(): number {\n//     return this._inventory.reduce((total, item) => total + item.price, 0);\n//   }\n//   printInventory() {\n//     console.log(`${this.name}'s Inventory:`);\n//     this._inventory.forEach((item) => {\n//       console.log(`- ${item.name}: $${item.price}`);\n//     });}\n// }\n// class Inventory {\n//   private _items: InventoryItem[];\n//   constructor() {\n//     this._items = [];\n//   }\n//   get items(): InventoryItem[] {\n//     return this._items;\n//   }\n//   addItem(item: InventoryItem) {\n//     this._items.push(item);\n//   }\n// }\n// class Shop {\n//   private _items: InventoryItem[];\n//   constructor() {\n//     this._items = [];\n//   }\n//   get items(): InventoryItem[] {\n//     return this._items;\n//   }\n// }\n// const char = new Character('milad', 'hi', 'melee');\n// const inventory = new Inventory();\n// const shop = new Shop();\n// inventory.addItem(new Weapon('tara', 20, 'knife', 5));\n// inventory.addItem(new Armor('sean', 30, 'shield', 15));\n// inventory.addItem(new Weapon('dylan', 35, 'gun', 6));\n// char.printInventory();\n// char.removeFromInventory(inventory.items[0]);\n// char.printInventory();\n// console.log(`Total: $${char.inventoryValue()}`);\n// console.log('Shop Inv:');\n// shop.items.forEach((item, index) => {\n//   console.log(`${index + 1}. ${item.name} - $${item.price}`);})\n// const example1 = Character.createRPGCharacter('milad','tara')\n// console.log(example1,'============================')\nclass Character {\n    name;\n    race;\n    inventory = [];\n    constructor(name, race) {\n        this.name = name;\n        this.race = race;\n    }\n    static createRPGCharacter(name, race) {\n        return new Character(name, race);\n    }\n    inventoryHTMLElement() {\n        const characterContainer = document.createElement(\"div\");\n        characterContainer.classList.add(\"character-container\");\n        const nameElement = document.createElement(\"p\");\n        nameElement.textContent = `Name: ${this.name}`;\n        const raceElement = document.createElement(\"p\");\n        raceElement.textContent = `Race: ${this.race}`;\n        const inventoryList = document.createElement(\"ul\");\n        inventoryList.classList.add(\"inventory-list\");\n        this.inventory.forEach((item) => {\n            const itemElement = document.createElement(\"li\");\n            itemElement.textContent = `${item.name} (Quantity: ${item.quantity}) - ${item.details}`;\n            inventoryList.appendChild(itemElement);\n        });\n        characterContainer.appendChild(nameElement);\n        characterContainer.appendChild(raceElement);\n        characterContainer.appendChild(inventoryList);\n        return characterContainer;\n    }\n    addItems(items) {\n        this.inventory.push(...items);\n    }\n    removeItem(index, quantityToRemove) {\n        if (index >= 0 && index < this.inventory.length) {\n            this.inventory[index].quantity -= quantityToRemove;\n            if (this.inventory[index].quantity <= 0) {\n                this.inventory.splice(index, 1);\n            }\n        }\n    }\n}\nclass Inventory {\n    items = [];\n    constructor(items) {\n        this.items = items;\n    }\n    showItems(character) {\n        // Implement code to display items in the \"Shop\" div\n    }\n    updateInventory(character) {\n        // Implement code to update the character's inventory in the \"Inventory\" div\n    }\n    static createRPGItems() {\n        // Implement code to create and return initial inventory items\n        return [\n            { name: \"Health Potion\", quantity: 3, details: \"Restores 50 HP\" },\n            { name: \"Mana Potion\", quantity: 5, details: \"Restores 30 MP\" },\n            { name: \"Sword\", quantity: 1, details: \"Damage: 20-40\" },\n        ];\n    }\n}\n// Driver code\nconst initialItems = Inventory.createRPGItems();\nconst inventory = new Inventory(initialItems);\nconst character = Character.createRPGCharacter(\"Character Name\", \"Character Race\");\ncharacter.addItems(initialItems);\n// Attach event listener for creating an RPG character\nconst createCharacterButton = document.getElementById(\"create-character-button\");\nif (createCharacterButton) {\n    createCharacterButton.addEventListener(\"click\", () => {\n        // Get character's name and race from user input\n        const nameInput = document.getElementById(\"name-input\");\n        const raceInput = document.getElementById(\"race-input\");\n        const name = nameInput.value;\n        const race = raceInput.value;\n        // Create a new RPG character and update the inventory\n        const character = Character.createRPGCharacter(name, race);\n        character.addItems(initialItems);\n        inventory.updateInventory(character);\n    });\n}\n// Show initial items in the \"Shop\" div\ninventory.showItems(character);\nconst characterr = Character.createRPGCharacter(\"John\", \"Human\");\nconsole.log(\"Created RPG Character:\", character);\ncharacter.addItems([\n    { name: \"Health Potion\", quantity: 3, details: \"Restores 50 HP\" },\n    { name: \"Mana Potion\", quantity: 5, details: \"Restores 30 MP\" },\n    { name: \"Sword\", quantity: 1, details: \"Damage: 20-40\" },\n]);\nconst characterContainer = character.inventoryHTMLElement();\ndocument.body.appendChild(characterContainer);\n\n\n//# sourceURL=webpack://thhomework/./src/script.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/script.ts"]();
/******/ 	
/******/ })()
;